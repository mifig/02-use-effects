{"ast":null,"code":"var _jsxFileName = \"/Users/miguelfigueiredo/Desktop/07_Projetos/react_udemy_course/udemy_projects/02-use-effects/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nconst AuthContextProvider = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\n    if (storedIsLoggedIn === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","_s","setIsLoggedIn","storedIsLoggedIn","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","Provider","value","children","props","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/miguelfigueiredo/Desktop/07_Projetos/react_udemy_course/udemy_projects/02-use-effects/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nconst AuthContext = React.createContext(\n  { \n    isLoggedIn: false,\n    onLogout: () => {}\n  }\n)\n\nconst AuthContextProvider = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedIsLoggedIn = localStorage.getItem('isLoggedIn');\n\n    if (storedIsLoggedIn === '1') {\n      setIsLoggedIn(true);\n    }\n  }, [])\n\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      isLoggedIn: isLoggedIn, \n      onLogout: logoutHandler \n    }}>\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport default AuthContext"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAa,CACrC;EACEC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEA,CAAA,KAAM,CAAC;AACnB,CACF,CAAC;AAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACH,UAAU,EAAEI,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMW,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAE3D,IAAIF,gBAAgB,KAAK,GAAG,EAAE;MAC5BD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMI,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAJ,YAAY,CAACK,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IAC1BN,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;IACrCT,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAC3Bf,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEW;IACZ,CAAE;IAAAI,QAAA,EACCC,KAAK,CAACD;EAAQ;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAAAlB,EAAA,CAhCKD,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AAkCzB,eAAeJ,WAAW;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}